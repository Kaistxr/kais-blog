{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bc72f0dd",
   "metadata": {},
   "source": [
    "---\n",
    "title: \"Market Overview\"\n",
    "---\n",
    "\n",
    "<style>\n",
    "/* CSS for the tabbed layout */\n",
    ".panel-tabset {\n",
    "    border-bottom: 2px solid #dee2e6;\n",
    "    margin-bottom: 1.5rem;\n",
    "}\n",
    "\n",
    ".panel-tabset > .nav-tabs .nav-link {\n",
    "    border: none;\n",
    "    border-bottom: 2px solid transparent;\n",
    "    color: #6c757d;\n",
    "    font-weight: 500;\n",
    "    text-transform: uppercase;\n",
    "    font-size: 0.9rem;\n",
    "    padding: 0.75rem 1.25rem;\n",
    "    transition: color 0.2s ease, border-color 0.2s ease;\n",
    "}\n",
    "\n",
    ".panel-tabset > .nav-tabs .nav-link:hover {\n",
    "    color: #000;\n",
    "}\n",
    "\n",
    ".panel-tabset > .nav-tabs .nav-link.active {\n",
    "    color: #000;\n",
    "    border-color: #0056b3;\n",
    "    background-color: transparent;\n",
    "}\n",
    "\n",
    "\n",
    "/* CSS for the market dashboard grid */\n",
    ".market-grid {\n",
    "    display: grid;\n",
    "    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n",
    "    gap: 1.5rem;\n",
    "    padding-top: 1rem;\n",
    "}\n",
    "\n",
    ".market-card {\n",
    "    border: 1px solid #e0e0e0;\n",
    "    border-radius: 8px;\n",
    "    padding: 1.5rem;\n",
    "    background-color: #fff;\n",
    "    box-shadow: 0 4px 6px rgba(0,0,0,0.05);\n",
    "    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n",
    "}\n",
    "\n",
    ".market-card:hover {\n",
    "    transform: translateY(-5px);\n",
    "    box-shadow: 0 8px 12px rgba(0,0,0,0.08);\n",
    "}\n",
    "\n",
    ".card-header {\n",
    "    display: flex;\n",
    "    justify-content: space-between;\n",
    "    align-items: baseline;\n",
    "    margin-bottom: 0.5rem;\n",
    "}\n",
    "\n",
    ".card-header h3 {\n",
    "    margin: 0;\n",
    "    font-size: 1.2rem;\n",
    "    font-weight: 600;\n",
    "    color: #333;\n",
    "}\n",
    "\n",
    ".card-header .price {\n",
    "    font-size: 1.5rem;\n",
    "    font-weight: 700;\n",
    "    color: #1a1a1a;\n",
    "}\n",
    "\n",
    ".card-change {\n",
    "    font-size: 1rem;\n",
    "    font-weight: 500;\n",
    "    margin-bottom: 1rem;\n",
    "}\n",
    "\n",
    ".positive {\n",
    "    color: #28a745; /* Green */\n",
    "}\n",
    "\n",
    ".negative {\n",
    "    color: #dc3545; /* Red */\n",
    "}\n",
    "\n",
    ".sparkline-chart {\n",
    "    width: 100%;\n",
    "    height: 80px;\n",
    "}\n",
    "\n",
    ".error-card {\n",
    "    background-color: #f8d7da;\n",
    "    color: #721c24;\n",
    "    padding: 1rem;\n",
    "    border-radius: 8px;\n",
    "}\n",
    "</style>\n",
    "\n",
    "::: {.panel-tabset}\n",
    "\n",
    "## UK"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ba2a08fd",
   "metadata": {
    "results": "asis"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div class=\"market-grid\"><div class=\"market-card error-card\">\n",
       "                       <h3>VODAFONE</h3>\n",
       "                       <p>An error occurred for ticker 'VOD':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>BARCLAYS</h3>\n",
       "                       <p>An error occurred for ticker 'BARC':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>GBP/USD</h3>\n",
       "                       <p>An error occurred for ticker 'C:GBPUSD':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>GBP/EUR</h3>\n",
       "                       <p>An error occurred for ticker 'C:GBPEUR':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>ASTRAZENECA</h3>\n",
       "                       <p>An error occurred for ticker 'AZN':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>GOLD/USD</h3>\n",
       "                       <p>An error occurred for ticker 'X:XAUUSD':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| echo: false\n",
    "# This python chunk generates the UK market cards using Polygon.io API\n",
    "\n",
    "import os\n",
    "import pandas as pd\n",
    "import plotly.graph_objects as go\n",
    "from IPython.display import display, HTML\n",
    "from polygon import RESTClient\n",
    "from datetime import date, timedelta\n",
    "from dotenv import load_dotenv\n",
    "\n",
    "# --- Load API Key from .env file ---\n",
    "load_dotenv() \n",
    "api_key = os.getenv(\"POLYGON_API_KEY\")\n",
    "\n",
    "# --- Tickers for the UK dashboard (Polygon format) ---\n",
    "# Using common stocks and forex pairs to ensure they are on the free plan\n",
    "uk_tickers = {\n",
    "    \"VOD\": \"VODAFONE\",\n",
    "    \"BARC\": \"BARCLAYS\",\n",
    "    \"C:GBPUSD\": \"GBP/USD\",\n",
    "    \"C:GBPEUR\": \"GBP/EUR\",\n",
    "    \"AZN\": \"ASTRAZENECA\",\n",
    "    \"X:XAUUSD\": \"GOLD/USD\"\n",
    "}\n",
    "\n",
    "def create_market_card(client, ticker_symbol, name):\n",
    "    \"\"\" Fetches data for a given ticker from Polygon.io and returns an HTML card. \"\"\"\n",
    "    try:\n",
    "        # --- FIX: Use named argument 'ticker' ---\n",
    "        snapshot = client.get_snapshot_ticker(ticker=ticker_symbol)\n",
    "        \n",
    "        # Check if we have valid snapshot data\n",
    "        if not snapshot or not hasattr(snapshot, 'day') or not hasattr(snapshot, 'prev_day'):\n",
    "             return f\"\"\"<div class=\"market-card error-card\">\n",
    "                           <h3>{name}</h3>\n",
    "                           <p>Snapshot data not found for '{ticker_symbol}'.</p>\n",
    "                       </div>\"\"\"\n",
    "\n",
    "        current_price = snapshot.day.close\n",
    "        change = snapshot.day.change\n",
    "        percent_change = snapshot.day.change_percent\n",
    "\n",
    "        # --- Fetch historical data for the sparkline chart ---\n",
    "        today = date.today()\n",
    "        sixty_days_ago = today - timedelta(days=60)\n",
    "        # --- FIX: Use named argument 'ticker' ---\n",
    "        hist = client.get_aggs(ticker=ticker_symbol, multiplier=1, timespan=\"day\", from_=sixty_days_ago.strftime(\"%Y-%m-%d\"), to=today.strftime(\"%Y-%m-%d\"))\n",
    "        \n",
    "        if not hist:\n",
    "            chart_html = \"<p>No historical data for sparkline.</p>\"\n",
    "        else:\n",
    "            hist_df = pd.DataFrame(hist)\n",
    "            hist_df['timestamp'] = pd.to_datetime(hist_df['timestamp'], unit='ms')\n",
    "            change_color_class = \"positive\" if change >= 0 else \"negative\"\n",
    "            fig = go.Figure()\n",
    "            fig.add_trace(go.Scatter(x=hist_df['timestamp'], y=hist_df['close'], mode='lines', line=dict(color=change_color_class, width=2), fill='tozeroy', fillcolor=f'rgba({ \"40, 167, 69\" if change >= 0 else \"220, 53, 69\" }, 0.1)'))\n",
    "            fig.update_layout(showlegend=False, margin=dict(l=0, r=0, t=0, b=0), xaxis=dict(visible=False), yaxis=dict(visible=False), plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)', height=80)\n",
    "            chart_html = fig.to_html(full_html=False, include_plotlyjs=False, config={'displayModeBar': False})\n",
    "        \n",
    "        # --- Format data for display ---\n",
    "        price_str = f\"{current_price:,.4f}\" if \"C:\" in ticker_symbol else f\"{current_price:,.2f}\"\n",
    "        change_str = f\"{change:+.4f} ({percent_change:+.2f}%)\" if \"C:\" in ticker_symbol else f\"{change:+.2f} ({percent_change:+.2f}%)\"\n",
    "        \n",
    "        return f'<div class=\"market-card\"><div class=\"card-header\"><h3>{name}</h3><span class=\"price\">{price_str}</span></div><div class=\"card-change {change_color_class}\">{change_str}</div><div class=\"sparkline-chart\">{chart_html}</div></div>'\n",
    "\n",
    "    except Exception as e:\n",
    "        return f\"\"\"<div class=\"market-card error-card\">\n",
    "                       <h3>{name}</h3>\n",
    "                       <p>An error occurred for ticker '{ticker_symbol}':</p>\n",
    "                       <pre><code>{e}</code></pre>\n",
    "                   </div>\"\"\"\n",
    "\n",
    "if api_key:\n",
    "    client = RESTClient(api_key)\n",
    "    uk_cards_html = \"\".join([create_market_card(client, symbol, name) for symbol, name in uk_tickers.items()])\n",
    "    display(HTML(f'<div class=\"market-grid\">{uk_cards_html}</div>'))\n",
    "else:\n",
    "    display(HTML(\"<p><i>Polygon.io API key not found. Please create a .env file in your project root with your key.</i></p>\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86f7f87f",
   "metadata": {},
   "source": [
    "## US"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "199e8bbe",
   "metadata": {
    "results": "asis"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div class=\"market-grid\"><div class=\"market-card error-card\">\n",
       "                       <h3>APPLE</h3>\n",
       "                       <p>An error occurred for ticker 'AAPL':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>MICROSOFT</h3>\n",
       "                       <p>An error occurred for ticker 'MSFT':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>GOOGLE</h3>\n",
       "                       <p>An error occurred for ticker 'GOOG':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>TESLA</h3>\n",
       "                       <p>An error occurred for ticker 'TSLA':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>EUR/USD</h3>\n",
       "                       <p>An error occurred for ticker 'C:EURUSD':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>USD/JPY</h3>\n",
       "                       <p>An error occurred for ticker 'C:USDJPY':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| echo: false\n",
    "# This python chunk generates the US market cards\n",
    "\n",
    "# --- Tickers for the US dashboard (Polygon format) ---\n",
    "us_tickers = {\n",
    "    \"AAPL\": \"APPLE\",\n",
    "    \"MSFT\": \"MICROSOFT\",\n",
    "    \"GOOG\": \"GOOGLE\",\n",
    "    \"TSLA\": \"TESLA\",\n",
    "    \"C:EURUSD\": \"EUR/USD\",\n",
    "    \"C:USDJPY\": \"USD/JPY\"\n",
    "}\n",
    "\n",
    "if api_key:\n",
    "    client = RESTClient(api_key)\n",
    "    us_cards_html = \"\".join([create_market_card(client, symbol, name) for symbol, name in us_tickers.items()])\n",
    "    display(HTML(f'<div class=\"market-grid\">{us_cards_html}</div>'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f321ab29",
   "metadata": {},
   "source": [
    "## Europe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ca7180aa",
   "metadata": {
    "results": "asis"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div class=\"market-grid\"><div class=\"market-card error-card\">\n",
       "                       <h3>UNILEVER</h3>\n",
       "                       <p>An error occurred for ticker 'UNA':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>VOLKSWAGEN</h3>\n",
       "                       <p>An error occurred for ticker 'VOW3':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>EUR/CHF</h3>\n",
       "                       <p>An error occurred for ticker 'C:EURCHF':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>EUR/NZD</h3>\n",
       "                       <p>An error occurred for ticker 'C:EURNZD':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>NESTLE</h3>\n",
       "                       <p>An error occurred for ticker 'NESN':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>EUR/GBP</h3>\n",
       "                       <p>An error occurred for ticker 'C:EURGBP':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| echo: false\n",
    "# This python chunk generates the Europe market cards\n",
    "\n",
    "# --- Tickers for the Europe dashboard (Polygon format) ---\n",
    "europe_tickers = {\n",
    "    \"UNA\": \"UNILEVER\",\n",
    "    \"VOW3\": \"VOLKSWAGEN\",\n",
    "    \"C:EURCHF\": \"EUR/CHF\",\n",
    "    \"C:EURNZD\": \"EUR/NZD\",\n",
    "    \"NESN\": \"NESTLE\",\n",
    "    \"C:EURGBP\": \"EUR/GBP\"\n",
    "}\n",
    "\n",
    "if api_key:\n",
    "    client = RESTClient(api_key)\n",
    "    europe_cards_html = \"\".join([create_market_card(client, symbol, name) for symbol, name in europe_tickers.items()])\n",
    "    display(HTML(f'<div class=\"market-grid\">{europe_cards_html}</div>'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e37fd65c",
   "metadata": {},
   "source": [
    "## Asia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a7c79024",
   "metadata": {
    "results": "asis"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div class=\"market-grid\"><div class=\"market-card error-card\">\n",
       "                       <h3>TOYOTA</h3>\n",
       "                       <p>An error occurred for ticker '7203':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>TENCENT</h3>\n",
       "                       <p>An error occurred for ticker '700':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>USD/CNY</h3>\n",
       "                       <p>An error occurred for ticker 'C:USDCNY':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>ALIBABA</h3>\n",
       "                       <p>An error occurred for ticker 'BABA':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>USD/INR</h3>\n",
       "                       <p>An error occurred for ticker 'C:USDINR':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div><div class=\"market-card error-card\">\n",
       "                       <h3>BITCOIN</h3>\n",
       "                       <p>An error occurred for ticker 'X:BTCUSD':</p>\n",
       "                       <pre><code>SnapshotClient.get_snapshot_ticker() missing 1 required positional argument: 'market_type'</code></pre>\n",
       "                   </div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| echo: false\n",
    "# This python chunk generates the Asia market cards\n",
    "\n",
    "# --- Tickers for the Asia dashboard (Polygon format) ---\n",
    "asia_tickers = {\n",
    "    \"7203\": \"TOYOTA\",\n",
    "    \"700\": \"TENCENT\",\n",
    "    \"C:USDCNY\": \"USD/CNY\",\n",
    "    \"BABA\": \"ALIBABA\",\n",
    "    \"C:USDINR\": \"USD/INR\",\n",
    "    \"X:BTCUSD\": \"BITCOIN\"\n",
    "}\n",
    "\n",
    "if api_key:\n",
    "    client = RESTClient(api_key)\n",
    "    asia_cards_html = \"\".join([create_market_card(client, symbol, name) for symbol, name in asia_tickers.items()])\n",
    "    display(HTML(f'<div class=\"market-grid\">{asia_cards_html}</div>'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8a328ab",
   "metadata": {},
   "source": [
    ":::"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/opt/anaconda3/share/jupyter/kernels/python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
